.modal-dialog.modal-lg
  .modal-content.vertical-center
    = simple_form_for @stop_order do |f|
      .modal-body
        .multi-part-form.block1.show
          .row
            .col-xs-12.text-center
              %h2.modal-header-text
                Two things you need to know before we continue
              %p.lead                
                = "1. If you are locked in to a contract you may need to agree to pay a fee to #{@merchant.name} to cancel"
              %p.lead
                = "2. We will always try to stop the charge and to let you know if we're having trouble, but we can not guarantee that we will be able to stop the charge before your next bill" 
              %button{ type: "button", class: "btn btn-default", data: {dismiss: "modal"} } Cancel
              %button.next{ type: "button", class: "btn btn-primary", data: {current_block: "1", next_block: "2"} } Ok, lets do this!

        .multi-part-form.block2.hidden.text-center
          %h2.modal-header-text
            ="#{@merchant.name} only lets you cancel by calling customer service" 
          %p.lead
            Don't worry we'll call them for you and do most of the work.  Just tell us when's a good time to conference you in to confirm the cancelation.  When can we call you?           
          .form-group
            %dl
              -CallWindow.available_windows_for_next_days.each do |day,windows|
                %dt{style: "margin-top: 5px;"}=day.strftime("%A, %b %d")
                %dd{style: "max-width: 570px; margin: 0 auto;"}
                  -windows.each do |window|
                    %button.btn.btn-primary-o.btn-sm.call-window-button-select{style: "margin: 2px 0px; width: 102px;", data: { window_id: window.id }}
                      = "#{window.window_start.localtime.strftime("%l%p")} to #{(window.window_start.localtime + 1.hour).strftime("%l%p")}"
          .hidden
            =f.input :call_window_id, as: :hidden
          .form-group
            %a{ href: "#" } confused? click here to see a short video about how this works
          .form-group
            %button.btn.btn-default{ type: "button", data: {dismiss: "modal"} } Cancel
            = f.button :submit, "Stop this Charge!", class: "btn btn-primary"

          %h5#error-reminder{style: "color: red;"}

:javascript

  $('.call-window-button-select').on('click', function (e) {
    $('.call-window-button-select.active').removeClass('active');
    $(this).addClass('active');
    $('#stop_order_call_window_id').val($(this).data('window-id'));
    return false;
  });

  // //hide errors
  // function hide_form_errors() {
  //   $('.form-errors').html("");
  //   $('.form-group').removeClass('has-error');
  // }

  // //autofill website from name
  // function updateMerchantWebsiteText(website) {
  //   if( typeof website == 'string' ) {
  //     $("#charge_merchant_website").css("color", "#fff");
  //     $("#charge_merchant_website")[0].value = website;
  //     $("#charge_merchant_website").animate({ color: "#66afe9" }, 300 );
  //     $("#charge_merchant_website").animate({ color: "#000" }, 2000 );
  //   }
  // }

  // function is_valid_url(url) {
  //   return url.match(/^((ftp|http|https):\/\/)?([a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+.*)$/);
  // };

  // function is_valid_currency(amount) {
  //   var present = !(amount == "");
  //   var valid = amount.match(/^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/);
  //   return (valid && present);
  // };

  // function is_valid_date(date) {
  //   return date.match(/^\d{4}-\d{2}-\d{2}$/)
  // };

  // //BEGIN: merchant website validation
  // function error_button_flash(button) {
  //   //flash button red
  //   button.css("background-color", "red");
  //   button.css("border-color", "red");
  //   button.css("color", "#fff");
  //   button.css("outline", "none");
  //   button.animate({ backgroundColor: "#088bff" }, {queue: false, duration: 1000});
  //   button.animate({ borderColor: "#088bff" }, {queue: false, duration: 1000}); 
  // };

  // function remove_error_reminder_if_form_valid() {
  //   if( !($("#charge-date-error").length) && !($("#amount-error").length) ) { $('#error-reminder').text("") }
  // }

  // //set page title
  // $('#modal-container').on('hidden.bs.modal', function (e) {
  //   $('title').html("trym.io | charges")
  // });

  // //charge category popover
  // $('#charge_merchant_name').popover({ toggle: "popover", title: "Forgetting anything?", content: "<ul class='popover-list'><li>Insurance</li><li>Credit Card Membership</li><li>Bank or Investment Accounts</li><li>Online Shopping</li><li>TV, Movies, and Internet</li><li>Utility Companies</li><li>Websites</li><li>Magazines or Journals</li></ul>", html: true, trigger: "focus", placement: "left" })

  // //intialize jqueryui date-picker
  // $('#charge_last_date_billed').datepicker({dateFormat: 'yy-mm-dd'});

  // $("#new_stop_order").change(function() {
  //   if( is_valid_url( $(this)[0].value ) || $(this)[0].value == '' ) {
  //     $('#charge_merchant_website').parent().removeClass('has-error');
  //     if( !($(this)[0].value == '') ) { $('#charge_merchant_name').parent().removeClass('has-error'); }; 
  //     $('.form-errors-1').text('');
  //   } else {
  //     $('#charge_merchant_website').parent().addClass('has-error');
  //     $('.form-errors-1').text(''); //just incase!
  //     $('.form-errors-1').text("the website you entered looks invalid - please correct it before continuing");
  //   }
  // });

  // //any merchant name should be acceptable
  // $("#charge_merchant_name").change(function() {
  //   if( !($(this)[0].value == '') ) { hide_form_errors() }
  // });

  //BEGIN: form-part-1 error handler
  $('.next').on('click', function () {
    var current = $(this).data('currentBlock');
    var next = $(this).data('nextBlock');
        
    //show the next block
    $('.block' + current).removeClass('show').addClass('hidden');
    $('.block' + next).removeClass('hidden').addClass('show');
    
  });
  //END: form-part-1 error handler

  // //charge amount validation
  // $("#charge_amount").change(function() {
  //   if( is_valid_currency( $(this)[0].value ) ) { 
  //     $(this).parent().parent().removeClass('has-error');
  //     $('#amount-error').remove();
  //     remove_error_reminder_if_form_valid()
  //   } else {
  //     $(this).parent().parent().addClass('has-error');
  //     if( !($("#amount-error").length ) ) {
  //       $('.form-errors-2').append("<li class='text-center' id=amount-error>charge amount must be present and must be a number</li>");
  //     }
  //   }
  // });

  // //last date billed validation
  // $("#charge_last_date_billed").change(function() {
  //   if( is_valid_date( $(this)[0].value ) ) { 
  //     $(this).parent().removeClass('has-error');
  //     $('#charge-date-error').remove();
  //     remove_error_reminder_if_form_valid()
  //   } else {
  //     $(this).parent().addClass('has-error');
  //     if( !($("#charge-date-error").length ) ) {
  //       $('.form-errors-2').append("<li class='text-center' id=charge-date-error>last bill date must be present and must be valid (yyyy-mm-dd)</li>");
  //     }
  //   }
  // });

  // //BEGIN: other renewal period validation
  // $('#charge_renewal_period_in_weeks').change(function() {
  //   var renewal_period_in_words = $('#charge_renewal_period_in_words')[0].value
  //   var renewal_period_in_weeks = $(this)[0].value

  //   if( renewal_period_in_words.value == "0" && $.isNumeric(renewal_period_in_weeks) ) {
  //     $(this).parent().removeClass('has-error');
  //     $('#renewal-weeks-error').remove();
  //     remove_error_reminder_if_form_valid()
  //   } else {
  //     $(this).parent().addClass('has-error');
  //     if( !($("#renewal-weeks-error").length ) ) {
  //       $('.form-errors-2').append("<li class='text-center' id=charge-date-error>other renewal period must be a number</li>");
  //     }
  //   }
  // });
  // $('#charge_renewal_period_in_words').change(function() {
  //   if( $(this).value != "0" ) {
  //     $('#charge_renewal_period_in_weeks').parent().removeClass('has-error');
  //     $('#renewal-weeks-error').remove();
  //     remove_error_reminder_if_form_valid()
  //   }
  // });
  // //END: other renewal period validation

  // //BEGIN: form-part-2 error handler
  // $('#new_charge').on('submit', function (event) {

  //   var amount = $("#charge_amount")[0].value;
  //   var last_date_billed = $('#charge_last_date_billed')[0].value;
  //   var renewal_period_in_words = $('#charge_renewal_period_in_words')[0].value;
  //   var renewal_period_in_weeks = $('#charge_renewal_period_in_weeks')[0].value;
  //   var errors = [];
  //   var error_classes = [];

  //   if( !is_valid_date(last_date_billed) ) { 
  //     errors.push("date of last bill must be present and must be a date (yyyy-mm-dd)");
  //     error_classes.push("charge-date-error")
  //     $('#charge_last_date_billed').parent().addClass('has-error');
  //   };

  //   if( !is_valid_currency(amount) ) { 
  //     errors.push("charge cost must be present and must be a number");
  //     error_classes.push("amount-error")
  //     $('#charge_amount').parent().parent().addClass('has-error');
  //   };

  //   if( renewal_period_in_words == "0" && !$.isNumeric(renewal_period_in_weeks) ) { 
  //     errors.push("other renewal period must be a number");
  //     error_classes.push("renewal-weeks-error")
  //     $('#charge_renewal_period_in_words').parent().addClass('has-error');
  //     $('#charge_renewal_period_in_weeks').parent().addClass('has-error');
  //   };

  //   if( errors.length > 0 ) {
      
  //     event.preventDefault();
  //     error_button_flash( $('input[name="commit"]') );
  //     $('#error-reminder').text("it looks like there's something wrong with the information you provided.  please fix it before continuing.");
      
  //     for ( var i = 0; i < errors.length; i = i + 1 ) {
  //       if( !($("#" + error_classes[i]).length ) ) {
  //         $('.form-errors-2').append("<li class='text-center' id=" + error_classes[i] + ">" + errors[i] + "</li>");
  //       }
  //     };
    
  //   } else {

  //     $('#error-reminder').text("");
  //   }
  // });
  // //END: form-part-2 error handler

  // //BEGIN: autocomplete for merchant-name
  // var websiteIndex = JSON.parse('#{@merchant_names_and_websites.to_json}');

  // $(function() {
  //   $( "#charge_merchant_name" ).autocomplete({
  //     source: #{@merchant_names}
  //   });
  // });

  // $("#charge_merchant_name").on({
  //   change: function() {
  //     updateMerchantWebsiteText( websiteIndex[$("#charge_merchant_name")[0].value.toUpperCase()] );
  //   }, autocompleteselect: function( event, ui ) {
  //     updateMerchantWebsiteText( websiteIndex[ui.item.value.toUpperCase()] );
  //   }
  // });
  // //END: autocomplete for merchant-name

  // //BEGIN: renewal period - other form
  // $("#charge_renewal_period_in_words").change(function() {
  //   if( $(this)[0].value == "0" ) {
  //     $(this).css("width", "30%")
  //     $("#charge_renewal_period_in_weeks").css("display", "inline-block")
  //   } else {
  //     $(this).css("width", "100%")
  //     $("#charge_renewal_period_in_weeks").css("display", "none")
  //   }
  // });
  // //END: renewal period - other form
