var TeslaClosestLocationImage;
TeslaClosestLocationImage = function () {
    function LocationValue(location_types){
        this.results_map ={
            8: "store",
            4: "service",
            2: "supercharger",
            1: "standard charger"
        }
        this.location_values = {
            store: 1<<3,
            service: 1<<2,
            supercharger: 1<<1,
            "standard charger": 1<<0
        };
        this.types = location_types;
        var types;
        for (var i=0; i<location_types.length; i++){
            var location_type = location_types[i];
            if( location_type == "destination charger" ) location_type = "standard charger";
            var current_type = this.location_values[location_type];
            types = types | current_type;

        }
        this.type_value = types;

    }
    LocationValue.prototype.getValue = function (){
        var result = this.type_value;
        result |= result >> 8;
        result |= result >> 4;
        result |= result >> 2;
        result |= result >> 1;
        result ^= result >> 1;
        return result;
    }
    LocationValue.prototype.getType = function(filter_types){
        var f_types;
        for (var i=0; i<filter_types.length; i++){
            f_types = f_types | this.location_values[filter_types[i]];
        }
        //console.log("filter values ", filter_types);
        var result = f_types & this.type_value;
        result |= result >> 8;
        result |= result >> 4;
        result |= result >> 2;
        result |= result >> 1;
        result ^= result >> 1;
        return this.results_map[result] || null;
    };


    var image_zoom = 11;
    var image_width = 200;
    var max_width = 640;
    var image_padding = 10;
    var image_height = 125;
    var search_radius = 2000;
    //maximum amount of images we can have
    var max_images = 3;
    var images = [];
    var image_holder = $(".pane-full-footer .locations");
    var search_order = ["store", "service", "supercharger"];
    var locations_service_url = "/all-locations/radius?";
    var strings_translated = {
        store: store_translate,
        service: service_translate,
        supercharger: supercharger_translate,
        gallery: gallery_translate
    }

    this.ipInfoLookup = function(){
        var url = server_protocol + "ipinfo.io/json?token=47216944bba1aa";
        if (!('withCredentials' in new XMLHttpRequest())) {
            url = "sites/all/modules/custom/tesla_findus_map/proxy.php?ip=true";
        }
        var latLong = readCookie("latLong");
        if( !latLong ){
            $.ajax({
                url: url,
                context: this
            }).done(function(data){
                data = typeof( data ) == "string" ? JSON.parse(data) : data;
                createCookie("latLong", data.loc.toString(), 0.1);
                this.getLocations(data.loc);
            })
        }else{
            this.getLocations(latLong);
        }

    };
    this.getLocations = function(latLong){

        if ( !latLong ){
            latLong = "0,0";
        }
        var latLong = latLong.split(',');
        var lat = latLong[0];
        var lng = latLong[1];
        var url = locations_service_url + 'type=service,store,supercharger' + '&lat='+lat+'&lng='+lng+'&radius=' + search_radius;
        $.ajax({
            url: url,
            context: this
        }).done(function(data){
            //get locations that are store, service and/or supercharger. Could be one location
            var closest_locations = this.findClosestLocations(data);
            for (var i=0; i<closest_locations.length; i++){
                var result = [];
                var types = closest_locations[i].location_type_searched;
                _.each(search_order, function (key){
                    var found = false;
                    types = types.filter(function (item){
                        if(!found && item == key){
                            result.push(item);
                            found = true;
                            return false;
                        }else{
                            return true;
                        }
                    })
                });

                closest_locations[i].location_type_searched = result;
            }

            for (var i=0; i<closest_locations.length; i++){
                var location_types_searched =closest_locations[i].location_type_searched;
                var calc_image_width = sizeImage(max_width, location_types_searched.length);//Math.floor( image_width * location_types_searched.length + (image_padding * (location_types_searched.length - 1)) ) ;
                var is_supercharger_name = closest_locations[i].title.toLowerCase().indexOf("supercharger");
                if(is_supercharger_name >= 0){
                    //remove supercharger from the name
                    var location_name = closest_locations[i].title.slice(0, is_supercharger_name);
                }else{
                    var location_name = closest_locations[i].title;
                }
                location_name = location_name.trim();
                var is_multiple = location_types_searched.length > 1;
                var title_part = is_multiple ? your_closest_translate : "";
                for(var j = 0; j < location_types_searched.length; j++){
                    var comma = ( j > 0 && j < location_types_searched.length - 1 )? "," : "";
                    title_part += comma + " " + ((j == location_types_searched.length-1 && location_types_searched.length > 1)? and_translate : "" )+ " " + strings_translated[this.getType( closest_locations[i].is_gallery ,location_types_searched[j])];
                }
                var title_full = is_multiple ? title_part + " " + is_translate + " " + location_name : location_name + title_part;
                var location_value = new LocationValue (location_types_searched);
                var value = location_value.getValue();
                var source_url = this.getGoogleImageUrl(closest_locations[i], image_zoom, calc_image_width, image_height);
                var image = {
                    title: title_full,
                    alias: Drupal.settings.tesla.localePrefix + closest_locations[i].path,
                    width: calc_image_width,
                    height: image_height,
                    weight: value,
                    source: source_url,
                    span: location_types_searched.length,
                    render : function(){
                        this.parent = $("#locationTemplate").tmpl(this).appendTo(".locations-map-images");
                        var $image = $(this.parent.find("img"));
                        this.image_el = $image;
                        this.parent.css("width", this.width+ image_padding + "px");//.css("overflow", "hidden");
                        $.ajax({
                            url:"/static-map?options=" + this.source,
                            context: this
                        }).done( function(data){

                                this.image_el.hide();

                                this.image_el.on('load', function(){
                                    $(this).fadeIn();
                                })
                                this.image_el.attr("src" , data);

                            }
                        )

                    }
                }
                images.push(image);

            }

            //if we did not find any close locations or one for the types, display world image;
            if( closest_locations.length == 0 ){
                images.push( this.getWorldLocation() );
            }
            //console.log("image ", images[0]);
            var len = images.length, max;
            for (var k=0; k<len; k++){
                max = k;
                for (var j=k+1; j < len; j++){
                    if (images[j].weight > images[max].weight){
                        max = j;
                    }
                }
                //if the minimum isn't in the position, swap it
                if (k != max){
                    swap(images, k, max);
                }
            }

            //attach position class last to the last image
            images[len-1].position = "last";

            for ( var i=0; i < images.length; i++){
                images[i].render();
            }
            //resize images
            resizeImages();
            //re-order array in order store, service, supercharger
            function swap(items, firstIndex, secondIndex){
                var temp = items[firstIndex];
                items[firstIndex] = items[secondIndex];
                items[secondIndex] = temp;
            }



        })
    };
    this.getType = function (isGallery, type){

        return isGallery && type == "store" ? "gallery" : type;

    }

    this.getWorldLocation = function(){
        return {
            title: "",
            alias: "#",
            width: sizeImage(max_width, 1),
            height: image_height,
            weight: 8,
            span: 3,
            source: this.getGoogleImageUrl( {location_type_searched:[], latitude:0, longitude:0 }, 1, image_width*3, image_height),
            render : function(){
                this.parent = $("#locationTemplate").tmpl(this).appendTo(".locations-map-images");
                var $image = $(this.parent.find("img"));
                this.image_el = $image;
                this.parent.css("width", this.width+ image_padding + "px");//.css("overflow", "hidden");
                $.ajax({
                    url:"/static-map?options=" + this.source,
                    context: this
                }).done( function(data){

                        this.image_el.hide();

                        this.image_el.on('load', function(){
                            $(this).fadeIn();
                        })
                        this.image_el.attr("src" , data);

                    }
                )

            }
        }
    }
    this.findClosestLocations = function(data){
        var i = 0;
        var search_types = ["store", "service", "supercharger"];
        var total_locations = data.length;
        var found_types = search_types.slice();
        var found_locations = [];
        while( found_types.length > 0 && i < total_locations ){
            var current_location = data[i];
            var current_location_types = current_location.location_type;
            for( var j=0; j < current_location_types.length; j++ ){
                var current_type = current_location_types[j];
                for( var k = 0; k < search_types.length; k++ ){
                    if( current_type == search_types[k] ){
                        var index = $.inArray(current_type, found_types);
                        found_types.splice(index, 1);
                        var index_current_found = $.inArray( current_location, found_locations )
                        if( index_current_found == -1 ){
                            current_location.location_type_searched = [];
                            current_location.location_type_searched.push(search_types[k]);
                            found_locations.push(current_location);
                        }else{
                            found_locations[index_current_found].location_type_searched.push(search_types[k]);
                        }

                    }
                }
                search_types = found_types.slice();
            }
            i++;
        }

        return found_locations;

    }

    this.getGoogleImageUrl = function (location, zoom, width, height){
        var style_road_highway_stroke = "%26style=" + encodeURI( "feature:road.highway|element:geometry.stroke|saturation:-100" );
        var style_road_highway_fill = "%26style=" + encodeURI( "feature:road.highway|element:geometry.fill|saturation:-100|lightness:50" );
        var style_road_highway_icon = "%26style=" + encodeURI( "feature:road.highway|element:labels.icon|saturation:-100|lightness:-9" );
        var style_water_fill = "%26style=" + encodeURI( "feature:water|element:geometry.fill|saturation:-100|lightness:-5" );
        var style_poi = "%26style=" + encodeURI("feature:poi|visibility:off");
        var image_url = "/sites/default/files/images/findus/pins/";
        var icons = {
            store: image_url + "icon-store2x.png",
            service: image_url + "icon-service2x.png",
            supercharger: image_url + "icon-supercharger2x.png",
            "standard charger": image_url + "icon-charger2x.png"
        };
        var location_icon = new LocationValue(location.location_type_searched);
        var icon_uri = icons[location_icon.getType(location.location_type_searched)];
        var store_icon_url = "http://www.teslamotors.com"+icon_uri;
        var center = location.latitude + ',' + location.longitude;
        var marker = ( icon_uri )? "%26markers=scale:2|icon:" + encodeURI( store_icon_url + "|" ) + center : "";
        map_url = "center=" + center + "%26zoom=" + zoom + "%26size=" + width + "x" + height + marker + style_road_highway_stroke + style_road_highway_icon + style_water_fill + style_poi + style_road_highway_fill;
        return map_url;
    }
    function sizeImage ( width_available, image_span ){

        return Math.floor( width_available * image_span/max_images - image_padding ) ;

        //image.width(Math.max(960, Math.min(imageMaxWidth, windowWidth)));
        //image.height(image.width()*imageHeightRatio);
    }
    function resizeImages(){
        var available_width = Math.min(Math.floor(image_holder.innerWidth()-1), max_width);

        for(var i= 0; i<images.length; i++){
            var width = sizeImage(available_width, images[i].span);
            images[i].image_el.attr("width", width);
            images[i].parent.css("width",  width + image_padding + "px");
        }
    }
    $(window).resize (function (){
        resizeImages();
    });
    this.ipInfoLookup();


};
$(document).ready(TeslaClosestLocationImage);
